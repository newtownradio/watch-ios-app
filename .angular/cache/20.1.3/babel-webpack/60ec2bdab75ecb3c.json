{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AiPricingService {\n  constructor() {\n    // Market data for popular watch brands/models\n    this.marketData = {\n      'rolex-submariner': {\n        brand: 'Rolex',\n        model: 'Submariner',\n        condition: 'excellent',\n        averagePrice: 8500,\n        priceRange: {\n          min: 7500,\n          max: 9500\n        },\n        marketTrend: 'rising',\n        demandLevel: 'high',\n        recentSales: 45,\n        daysOnMarket: 12\n      },\n      'omega-speedmaster': {\n        brand: 'Omega',\n        model: 'Speedmaster',\n        condition: 'excellent',\n        averagePrice: 4200,\n        priceRange: {\n          min: 3800,\n          max: 4800\n        },\n        marketTrend: 'stable',\n        demandLevel: 'high',\n        recentSales: 32,\n        daysOnMarket: 18\n      },\n      'cartier-santos': {\n        brand: 'Cartier',\n        model: 'Santos',\n        condition: 'excellent',\n        averagePrice: 6800,\n        priceRange: {\n          min: 6200,\n          max: 7500\n        },\n        marketTrend: 'rising',\n        demandLevel: 'medium',\n        recentSales: 28,\n        daysOnMarket: 22\n      },\n      'tudor-black-bay': {\n        brand: 'Tudor',\n        model: 'Black Bay',\n        condition: 'excellent',\n        averagePrice: 3200,\n        priceRange: {\n          min: 2900,\n          max: 3600\n        },\n        marketTrend: 'stable',\n        demandLevel: 'medium',\n        recentSales: 38,\n        daysOnMarket: 15\n      },\n      'seiko-prospex': {\n        brand: 'Seiko',\n        model: 'Prospex',\n        condition: 'excellent',\n        averagePrice: 450,\n        priceRange: {\n          min: 400,\n          max: 550\n        },\n        marketTrend: 'stable',\n        demandLevel: 'high',\n        recentSales: 67,\n        daysOnMarket: 8\n      },\n      'tag-heuer-carrera': {\n        brand: 'Tag Heuer',\n        model: 'Carrera',\n        condition: 'excellent',\n        averagePrice: 2800,\n        priceRange: {\n          min: 2500,\n          max: 3200\n        },\n        marketTrend: 'stable',\n        demandLevel: 'medium',\n        recentSales: 25,\n        daysOnMarket: 20\n      },\n      'breitling-navitimer': {\n        brand: 'Breitling',\n        model: 'Navitimer',\n        condition: 'excellent',\n        averagePrice: 5200,\n        priceRange: {\n          min: 4800,\n          max: 5800\n        },\n        marketTrend: 'stable',\n        demandLevel: 'medium',\n        recentSales: 22,\n        daysOnMarket: 25\n      },\n      'iwc-portugieser': {\n        brand: 'IWC',\n        model: 'Portugieser',\n        condition: 'excellent',\n        averagePrice: 7800,\n        priceRange: {\n          min: 7200,\n          max: 8500\n        },\n        marketTrend: 'rising',\n        demandLevel: 'medium',\n        recentSales: 18,\n        daysOnMarket: 30\n      },\n      'panerai-luminor': {\n        brand: 'Panerai',\n        model: 'Luminor',\n        condition: 'excellent',\n        averagePrice: 6500,\n        priceRange: {\n          min: 6000,\n          max: 7200\n        },\n        marketTrend: 'stable',\n        demandLevel: 'medium',\n        recentSales: 20,\n        daysOnMarket: 28\n      },\n      'audemars-piguet-royal-oak': {\n        brand: 'Audemars Piguet',\n        model: 'Royal Oak',\n        condition: 'excellent',\n        averagePrice: 45000,\n        priceRange: {\n          min: 42000,\n          max: 48000\n        },\n        marketTrend: 'rising',\n        demandLevel: 'high',\n        recentSales: 12,\n        daysOnMarket: 35\n      },\n      'patek-philippe-calatrava': {\n        brand: 'Patek Philippe',\n        model: 'Calatrava',\n        condition: 'excellent',\n        averagePrice: 28000,\n        priceRange: {\n          min: 26000,\n          max: 30000\n        },\n        marketTrend: 'rising',\n        demandLevel: 'high',\n        recentSales: 8,\n        daysOnMarket: 45\n      },\n      'vacheron-constantin-overseas': {\n        brand: 'Vacheron Constantin',\n        model: 'Overseas',\n        condition: 'excellent',\n        averagePrice: 22000,\n        priceRange: {\n          min: 20000,\n          max: 24000\n        },\n        marketTrend: 'stable',\n        demandLevel: 'medium',\n        recentSales: 15,\n        daysOnMarket: 40\n      }\n    };\n  }\n  /**\n   * Get AI pricing recommendation based on watch details\n   */\n  getPricingRecommendation(brand, model, year, condition = 'excellent', originalPrice) {\n    const key = this.generateMarketKey(brand, model);\n    const marketData = this.marketData[key] || this.getDefaultMarketData(brand, model);\n    // Calculate condition multiplier\n    const conditionMultiplier = this.getConditionMultiplier(condition);\n    // Calculate brand value factor\n    const brandValue = this.getBrandValueFactor(brand);\n    // Calculate market demand factor\n    const demandFactor = this.getDemandFactor(marketData.demandLevel);\n    // Calculate seasonal adjustment\n    const seasonalAdjustment = this.getSeasonalAdjustment();\n    // Calculate suggested price\n    let suggestedPrice = marketData.averagePrice * conditionMultiplier * brandValue * demandFactor * seasonalAdjustment;\n    // If original price provided, consider it in the calculation\n    if (originalPrice) {\n      const originalWeight = 0.3;\n      const marketWeight = 0.7;\n      suggestedPrice = originalPrice * originalWeight + suggestedPrice * marketWeight;\n    }\n    // Ensure price is within reasonable range\n    suggestedPrice = Math.max(marketData.priceRange.min * 0.8, suggestedPrice);\n    suggestedPrice = Math.min(marketData.priceRange.max * 1.2, suggestedPrice);\n    // Calculate confidence based on data quality\n    const confidence = this.calculateConfidence(marketData, condition, brand);\n    // Generate reasoning\n    const reasoning = this.generateReasoning(marketData, condition, brand, suggestedPrice, originalPrice);\n    return {\n      suggestedPrice: Math.round(suggestedPrice),\n      confidence,\n      reasoning,\n      marketInsights: marketData,\n      priceFactors: {\n        brandValue,\n        conditionMultiplier,\n        marketDemand: demandFactor,\n        seasonalAdjustment\n      }\n    };\n  }\n  /**\n   * Get available brands for pricing analysis\n   */\n  getAvailableBrands() {\n    console.log('=== getAvailableBrands called ===');\n    const brands = new Set();\n    // Get brands from market data\n    Object.values(this.marketData).forEach(data => {\n      brands.add(data.brand);\n    });\n    // Add all brands from additional models\n    const additionalBrands = ['Rolex', 'Omega', 'Cartier', 'Tudor', 'Seiko', 'Tag Heuer', 'Breitling', 'IWC', 'Panerai', 'Audemars Piguet', 'Patek Philippe', 'Vacheron Constantin', 'Longines', 'Tissot', 'Hamilton', 'Mido', 'Swatch', 'Casio', 'Citizen', 'Bulova', 'Timex'];\n    additionalBrands.forEach(brand => brands.add(brand));\n    const result = Array.from(brands).sort();\n    console.log('Returning brands:', result);\n    return result;\n  }\n  /**\n   * Get models for a specific brand\n   */\n  getModelsForBrand(brand) {\n    const models = new Set();\n    // Get models from market data\n    Object.values(this.marketData).forEach(data => {\n      if (data.brand.toLowerCase() === brand.toLowerCase()) {\n        models.add(data.model);\n      }\n    });\n    // Add additional common models for each brand\n    const additionalModels = this.getAdditionalModelsForBrand(brand);\n    additionalModels.forEach(model => models.add(model));\n    return Array.from(models).sort();\n  }\n  /**\n   * Generate market data key\n   */\n  generateMarketKey(brand, model) {\n    return `${brand.toLowerCase()}-${model.toLowerCase().replace(/\\s+/g, '-')}`;\n  }\n  /**\n   * Get default market data for unknown brands/models\n   */\n  getDefaultMarketData(brand, model) {\n    return {\n      brand,\n      model,\n      condition: 'excellent',\n      averagePrice: 2500,\n      // Default average\n      priceRange: {\n        min: 2000,\n        max: 3000\n      },\n      marketTrend: 'stable',\n      demandLevel: 'medium',\n      recentSales: 15,\n      daysOnMarket: 25\n    };\n  }\n  /**\n   * Calculate condition multiplier\n   */\n  getConditionMultiplier(condition) {\n    const multipliers = {\n      'excellent': 1.0,\n      'very-good': 0.85,\n      'good': 0.7,\n      'fair': 0.55\n    };\n    return multipliers[condition] || 1.0;\n  }\n  /**\n   * Calculate brand value factor\n   */\n  getBrandValueFactor(brand) {\n    const brandFactors = {\n      'rolex': 1.2,\n      'patek philippe': 1.3,\n      'audemars piguet': 1.25,\n      'omega': 1.0,\n      'cartier': 1.1,\n      'breitling': 1.0,\n      'iwc': 1.05,\n      'panerai': 1.0,\n      'tudor': 0.9,\n      'tag heuer': 0.85,\n      'seiko': 0.7\n    };\n    const brandLower = brand.toLowerCase();\n    return brandFactors[brandLower] || 1.0;\n  }\n  /**\n   * Calculate demand factor\n   */\n  getDemandFactor(demandLevel) {\n    const factors = {\n      'high': 1.1,\n      'medium': 1.0,\n      'low': 0.9\n    };\n    return factors[demandLevel] || 1.0;\n  }\n  /**\n   * Calculate seasonal adjustment\n   */\n  getSeasonalAdjustment() {\n    const month = new Date().getMonth();\n    // Holiday season (Nov-Dec) slight premium\n    if (month === 10 || month === 11) return 1.05;\n    // Summer months slight discount\n    if (month >= 5 && month <= 8) return 0.98;\n    return 1.0;\n  }\n  /**\n   * Calculate confidence score\n   */\n  calculateConfidence(marketData, condition, brand) {\n    let confidence = 0.7; // Base confidence\n    // Adjust based on data quality\n    if (marketData.recentSales > 20) confidence += 0.1;\n    if (marketData.daysOnMarket < 20) confidence += 0.1;\n    if (condition === 'excellent') confidence += 0.05;\n    if (this.getBrandValueFactor(brand) > 1.0) confidence += 0.05;\n    return Math.min(confidence, 0.95);\n  }\n  /**\n   * Generate reasoning for pricing recommendation\n   */\n  generateReasoning(marketData, condition, brand, suggestedPrice, originalPrice) {\n    const reasoning = [];\n    reasoning.push(`Market average for ${marketData.brand} ${marketData.model}: $${marketData.averagePrice.toLocaleString()}`);\n    if (condition !== 'excellent') {\n      reasoning.push(`Condition adjustment (${condition}): ${Math.round((1 - this.getConditionMultiplier(condition)) * 100)}% reduction`);\n    }\n    if (marketData.marketTrend === 'rising') {\n      reasoning.push('Market trend: Rising demand, premium pricing recommended');\n    } else if (marketData.marketTrend === 'declining') {\n      reasoning.push('Market trend: Declining demand, competitive pricing recommended');\n    }\n    if (marketData.demandLevel === 'high') {\n      reasoning.push('High market demand: Premium pricing supported');\n    } else if (marketData.demandLevel === 'low') {\n      reasoning.push('Low market demand: Competitive pricing recommended');\n    }\n    if (originalPrice) {\n      const difference = suggestedPrice - originalPrice;\n      const percentage = Math.round(difference / originalPrice * 100);\n      if (difference > 0) {\n        reasoning.push(`Your original price: $${originalPrice.toLocaleString()} (+${percentage}% adjustment recommended)`);\n      } else {\n        reasoning.push(`Your original price: $${originalPrice.toLocaleString()} (${percentage}% adjustment recommended)`);\n      }\n    }\n    reasoning.push(`Recent sales: ${marketData.recentSales} similar watches sold`);\n    reasoning.push(`Average days on market: ${marketData.daysOnMarket} days`);\n    return reasoning;\n  }\n  /**\n   * Get additional common models for each brand\n   */\n  getAdditionalModelsForBrand(brand) {\n    const brandModels = {\n      'Rolex': ['Datejust', 'Daytona', 'GMT-Master', 'Explorer', 'Milgauss', 'Yacht-Master', 'Sea-Dweller', 'Air-King', 'Cellini', 'Oyster Perpetual'],\n      'Omega': ['Seamaster', 'Constellation', 'De Ville', 'Speedmaster Professional', 'Aqua Terra', 'Planet Ocean', 'Railmaster', 'Seamaster Diver 300M'],\n      'Cartier': ['Tank', 'Ballon Bleu', 'Pasha', 'Roadster', 'Calibre', 'Drive', 'Ronde', 'Baignoire', 'Crash', 'Tortue'],\n      'Tudor': ['Pelagos', 'Ranger', 'GMT', 'Chronograph', 'Royal', 'Submariner', 'Heritage', 'Black Bay 58', 'Black Bay GMT'],\n      'Seiko': ['Presage', 'Prospex', 'Astron', 'Premier', '5 Sports', 'Grand Seiko', 'King Seiko', 'Credor', 'Alpinist', 'Monster'],\n      'Tag Heuer': ['Monaco', 'Carrera', 'Aquaracer', 'Link', 'Formula 1', 'Autavia', 'Connected', 'Monza', 'Silverstone', 'Professional'],\n      'Breitling': ['Chronomat', 'Superocean', 'Avenger', 'Transocean', 'Premier', 'Chronoliner', 'Aerospace', 'Emergency', 'Montbrillant', 'Datora'],\n      'IWC': ['Pilot', 'Ingenieur', 'Aquatimer', 'Da Vinci', 'Portofino', 'Vintage Collection', 'Le Petit Prince', 'Spitfire', 'Top Gun'],\n      'Panerai': ['Radiomir', 'Luminor', 'Submersible', 'Luminor Due', 'Luminor Marina', 'Radiomir 1940', 'Luminor 1950', 'Luminor GMT', 'Luminor Chrono'],\n      'Audemars Piguet': ['Royal Oak', 'Royal Oak Offshore', 'Millenary', 'Jules Audemars', 'Classique', 'Code 11.59', 'Royal Oak Concept', 'Tradition'],\n      'Patek Philippe': ['Calatrava', 'Nautilus', 'Aquanaut', 'Grand Complications', 'Complications', 'Golden Ellipse', 'Gondolo', 'Twenty-4'],\n      'Vacheron Constantin': ['Overseas', 'Fiftysix', 'Traditionnelle', 'Patrimony', 'Métiers d\\'Art', 'Historiques', 'Malte', 'Harmony'],\n      'Longines': ['Conquest', 'Heritage', 'Master Collection', 'DolceVita', 'La Grande Classique', 'HydroConquest', 'Elegant', 'Presence'],\n      'Tissot': ['T-Touch', 'T-Classic', 'T-Sport', 'T-Lady', 'T-Gold', 'Le Locle', 'Couturier', 'Tradition', 'Chemin des Tourelles'],\n      'Hamilton': ['Khaki', 'Jazzmaster', 'Ventura', 'American Classic', 'Broadway', 'Pilot', 'Railroad', 'Frogman', 'Pan Europ'],\n      'Mido': ['Baroncelli', 'Commander', 'Multifort', 'Ocean Star', 'All Dial', 'Rainflower', 'Belluna', 'Helmsman'],\n      'Swatch': ['Originals', 'Irony', 'Skin', 'Scuba', 'Chrono', 'Touch', 'Sistem51', 'Flik Flak', 'Swatch Club'],\n      'Casio': ['G-Shock', 'Pro Trek', 'Edifice', 'Baby-G', 'Sheen', 'Pathfinder', 'Gulfman', 'Riseman', 'Mudman'],\n      'Citizen': ['Eco-Drive', 'Promaster', 'Corso', 'Satellite Wave', 'Chronomaster', 'Exceed', 'Campanola', 'Attesa'],\n      'Bulova': ['Precisionist', 'Marine Star', 'Curv', 'Accutron', 'Classic', 'Automatic', 'Quartz', 'Special Edition'],\n      'Timex': ['Expedition', 'Weekender', 'Ironman', 'Easy Reader', 'Waterbury', 'Fairfield', 'South Street', 'Marlin']\n    };\n    return brandModels[brand] || [];\n  }\n  static #_ = this.ɵfac = function AiPricingService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AiPricingService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AiPricingService,\n    factory: AiPricingService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AiPricingService","constructor","marketData","brand","model","condition","averagePrice","priceRange","min","max","marketTrend","demandLevel","recentSales","daysOnMarket","getPricingRecommendation","year","originalPrice","key","generateMarketKey","getDefaultMarketData","conditionMultiplier","getConditionMultiplier","brandValue","getBrandValueFactor","demandFactor","getDemandFactor","seasonalAdjustment","getSeasonalAdjustment","suggestedPrice","originalWeight","marketWeight","Math","confidence","calculateConfidence","reasoning","generateReasoning","round","marketInsights","priceFactors","marketDemand","getAvailableBrands","console","log","brands","Set","Object","values","forEach","data","add","additionalBrands","result","Array","from","sort","getModelsForBrand","models","toLowerCase","additionalModels","getAdditionalModelsForBrand","replace","multipliers","brandFactors","brandLower","factors","month","Date","getMonth","push","toLocaleString","difference","percentage","brandModels","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/colinilgen/watch-ios/src/app/services/ai-pricing.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface MarketData {\n  brand: string;\n  model: string;\n  year?: number;\n  condition: 'excellent' | 'very-good' | 'good' | 'fair';\n  averagePrice: number;\n  priceRange: {\n    min: number;\n    max: number;\n  };\n  marketTrend: 'rising' | 'stable' | 'declining';\n  demandLevel: 'high' | 'medium' | 'low';\n  recentSales: number;\n  daysOnMarket: number;\n}\n\nexport interface PricingRecommendation {\n  suggestedPrice: number;\n  confidence: number;\n  reasoning: string[];\n  marketInsights: MarketData;\n  priceFactors: {\n    brandValue: number;\n    conditionMultiplier: number;\n    marketDemand: number;\n    seasonalAdjustment: number;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiPricingService {\n\n  // Market data for popular watch brands/models\n  private marketData: { [key: string]: MarketData } = {\n    'rolex-submariner': {\n      brand: 'Rolex',\n      model: 'Submariner',\n      condition: 'excellent',\n      averagePrice: 8500,\n      priceRange: { min: 7500, max: 9500 },\n      marketTrend: 'rising',\n      demandLevel: 'high',\n      recentSales: 45,\n      daysOnMarket: 12\n    },\n    'omega-speedmaster': {\n      brand: 'Omega',\n      model: 'Speedmaster',\n      condition: 'excellent',\n      averagePrice: 4200,\n      priceRange: { min: 3800, max: 4800 },\n      marketTrend: 'stable',\n      demandLevel: 'high',\n      recentSales: 32,\n      daysOnMarket: 18\n    },\n    'cartier-santos': {\n      brand: 'Cartier',\n      model: 'Santos',\n      condition: 'excellent',\n      averagePrice: 6800,\n      priceRange: { min: 6200, max: 7500 },\n      marketTrend: 'rising',\n      demandLevel: 'medium',\n      recentSales: 28,\n      daysOnMarket: 22\n    },\n    'tudor-black-bay': {\n      brand: 'Tudor',\n      model: 'Black Bay',\n      condition: 'excellent',\n      averagePrice: 3200,\n      priceRange: { min: 2900, max: 3600 },\n      marketTrend: 'stable',\n      demandLevel: 'medium',\n      recentSales: 38,\n      daysOnMarket: 15\n    },\n    'seiko-prospex': {\n      brand: 'Seiko',\n      model: 'Prospex',\n      condition: 'excellent',\n      averagePrice: 450,\n      priceRange: { min: 400, max: 550 },\n      marketTrend: 'stable',\n      demandLevel: 'high',\n      recentSales: 67,\n      daysOnMarket: 8\n    },\n    'tag-heuer-carrera': {\n      brand: 'Tag Heuer',\n      model: 'Carrera',\n      condition: 'excellent',\n      averagePrice: 2800,\n      priceRange: { min: 2500, max: 3200 },\n      marketTrend: 'stable',\n      demandLevel: 'medium',\n      recentSales: 25,\n      daysOnMarket: 20\n    },\n    'breitling-navitimer': {\n      brand: 'Breitling',\n      model: 'Navitimer',\n      condition: 'excellent',\n      averagePrice: 5200,\n      priceRange: { min: 4800, max: 5800 },\n      marketTrend: 'stable',\n      demandLevel: 'medium',\n      recentSales: 22,\n      daysOnMarket: 25\n    },\n    'iwc-portugieser': {\n      brand: 'IWC',\n      model: 'Portugieser',\n      condition: 'excellent',\n      averagePrice: 7800,\n      priceRange: { min: 7200, max: 8500 },\n      marketTrend: 'rising',\n      demandLevel: 'medium',\n      recentSales: 18,\n      daysOnMarket: 30\n    },\n    'panerai-luminor': {\n      brand: 'Panerai',\n      model: 'Luminor',\n      condition: 'excellent',\n      averagePrice: 6500,\n      priceRange: { min: 6000, max: 7200 },\n      marketTrend: 'stable',\n      demandLevel: 'medium',\n      recentSales: 20,\n      daysOnMarket: 28\n    },\n    'audemars-piguet-royal-oak': {\n      brand: 'Audemars Piguet',\n      model: 'Royal Oak',\n      condition: 'excellent',\n      averagePrice: 45000,\n      priceRange: { min: 42000, max: 48000 },\n      marketTrend: 'rising',\n      demandLevel: 'high',\n      recentSales: 12,\n      daysOnMarket: 35\n    },\n    'patek-philippe-calatrava': {\n      brand: 'Patek Philippe',\n      model: 'Calatrava',\n      condition: 'excellent',\n      averagePrice: 28000,\n      priceRange: { min: 26000, max: 30000 },\n      marketTrend: 'rising',\n      demandLevel: 'high',\n      recentSales: 8,\n      daysOnMarket: 45\n    },\n    'vacheron-constantin-overseas': {\n      brand: 'Vacheron Constantin',\n      model: 'Overseas',\n      condition: 'excellent',\n      averagePrice: 22000,\n      priceRange: { min: 20000, max: 24000 },\n      marketTrend: 'stable',\n      demandLevel: 'medium',\n      recentSales: 15,\n      daysOnMarket: 40\n    }\n  };\n\n  constructor() { }\n\n  /**\n   * Get AI pricing recommendation based on watch details\n   */\n  getPricingRecommendation(\n    brand: string,\n    model: string,\n    year?: number,\n    condition: 'excellent' | 'very-good' | 'good' | 'fair' = 'excellent',\n    originalPrice?: number\n  ): PricingRecommendation {\n    \n    const key = this.generateMarketKey(brand, model);\n    const marketData = this.marketData[key] || this.getDefaultMarketData(brand, model);\n    \n    // Calculate condition multiplier\n    const conditionMultiplier = this.getConditionMultiplier(condition);\n    \n    // Calculate brand value factor\n    const brandValue = this.getBrandValueFactor(brand);\n    \n    // Calculate market demand factor\n    const demandFactor = this.getDemandFactor(marketData.demandLevel);\n    \n    // Calculate seasonal adjustment\n    const seasonalAdjustment = this.getSeasonalAdjustment();\n    \n    // Calculate suggested price\n    let suggestedPrice = marketData.averagePrice * conditionMultiplier * brandValue * demandFactor * seasonalAdjustment;\n    \n    // If original price provided, consider it in the calculation\n    if (originalPrice) {\n      const originalWeight = 0.3;\n      const marketWeight = 0.7;\n      suggestedPrice = (originalPrice * originalWeight) + (suggestedPrice * marketWeight);\n    }\n    \n    // Ensure price is within reasonable range\n    suggestedPrice = Math.max(marketData.priceRange.min * 0.8, suggestedPrice);\n    suggestedPrice = Math.min(marketData.priceRange.max * 1.2, suggestedPrice);\n    \n    // Calculate confidence based on data quality\n    const confidence = this.calculateConfidence(marketData, condition, brand);\n    \n    // Generate reasoning\n    const reasoning = this.generateReasoning(marketData, condition, brand, suggestedPrice, originalPrice);\n    \n    return {\n      suggestedPrice: Math.round(suggestedPrice),\n      confidence,\n      reasoning,\n      marketInsights: marketData,\n      priceFactors: {\n        brandValue,\n        conditionMultiplier,\n        marketDemand: demandFactor,\n        seasonalAdjustment\n      }\n    };\n  }\n\n  /**\n   * Get available brands for pricing analysis\n   */\n  getAvailableBrands(): string[] {\n    console.log('=== getAvailableBrands called ===');\n    const brands = new Set<string>();\n    \n    // Get brands from market data\n    Object.values(this.marketData).forEach(data => {\n      brands.add(data.brand);\n    });\n    \n    // Add all brands from additional models\n    const additionalBrands = [\n      'Rolex', 'Omega', 'Cartier', 'Tudor', 'Seiko', 'Tag Heuer', 'Breitling', 'IWC', 'Panerai',\n      'Audemars Piguet', 'Patek Philippe', 'Vacheron Constantin', 'Longines', 'Tissot', 'Hamilton',\n      'Mido', 'Swatch', 'Casio', 'Citizen', 'Bulova', 'Timex'\n    ];\n    \n    additionalBrands.forEach(brand => brands.add(brand));\n    \n    const result = Array.from(brands).sort();\n    console.log('Returning brands:', result);\n    return result;\n  }\n\n  /**\n   * Get models for a specific brand\n   */\n  getModelsForBrand(brand: string): string[] {\n    const models = new Set<string>();\n    \n    // Get models from market data\n    Object.values(this.marketData).forEach(data => {\n      if (data.brand.toLowerCase() === brand.toLowerCase()) {\n        models.add(data.model);\n      }\n    });\n    \n    // Add additional common models for each brand\n    const additionalModels = this.getAdditionalModelsForBrand(brand);\n    additionalModels.forEach(model => models.add(model));\n    \n    return Array.from(models).sort();\n  }\n\n  /**\n   * Generate market data key\n   */\n  private generateMarketKey(brand: string, model: string): string {\n    return `${brand.toLowerCase()}-${model.toLowerCase().replace(/\\s+/g, '-')}`;\n  }\n\n  /**\n   * Get default market data for unknown brands/models\n   */\n  private getDefaultMarketData(brand: string, model: string): MarketData {\n    return {\n      brand,\n      model,\n      condition: 'excellent',\n      averagePrice: 2500, // Default average\n      priceRange: { min: 2000, max: 3000 },\n      marketTrend: 'stable',\n      demandLevel: 'medium',\n      recentSales: 15,\n      daysOnMarket: 25\n    };\n  }\n\n  /**\n   * Calculate condition multiplier\n   */\n  private getConditionMultiplier(condition: string): number {\n    const multipliers = {\n      'excellent': 1.0,\n      'very-good': 0.85,\n      'good': 0.7,\n      'fair': 0.55\n    };\n    return multipliers[condition as keyof typeof multipliers] || 1.0;\n  }\n\n  /**\n   * Calculate brand value factor\n   */\n  private getBrandValueFactor(brand: string): number {\n    const brandFactors: { [key: string]: number } = {\n      'rolex': 1.2,\n      'patek philippe': 1.3,\n      'audemars piguet': 1.25,\n      'omega': 1.0,\n      'cartier': 1.1,\n      'breitling': 1.0,\n      'iwc': 1.05,\n      'panerai': 1.0,\n      'tudor': 0.9,\n      'tag heuer': 0.85,\n      'seiko': 0.7\n    };\n    \n    const brandLower = brand.toLowerCase();\n    return brandFactors[brandLower] || 1.0;\n  }\n\n  /**\n   * Calculate demand factor\n   */\n  private getDemandFactor(demandLevel: string): number {\n    const factors = {\n      'high': 1.1,\n      'medium': 1.0,\n      'low': 0.9\n    };\n    return factors[demandLevel as keyof typeof factors] || 1.0;\n  }\n\n  /**\n   * Calculate seasonal adjustment\n   */\n  private getSeasonalAdjustment(): number {\n    const month = new Date().getMonth();\n    // Holiday season (Nov-Dec) slight premium\n    if (month === 10 || month === 11) return 1.05;\n    // Summer months slight discount\n    if (month >= 5 && month <= 8) return 0.98;\n    return 1.0;\n  }\n\n  /**\n   * Calculate confidence score\n   */\n  private calculateConfidence(marketData: MarketData, condition: string, brand: string): number {\n    let confidence = 0.7; // Base confidence\n    \n    // Adjust based on data quality\n    if (marketData.recentSales > 20) confidence += 0.1;\n    if (marketData.daysOnMarket < 20) confidence += 0.1;\n    if (condition === 'excellent') confidence += 0.05;\n    if (this.getBrandValueFactor(brand) > 1.0) confidence += 0.05;\n    \n    return Math.min(confidence, 0.95);\n  }\n\n  /**\n   * Generate reasoning for pricing recommendation\n   */\n  private generateReasoning(\n    marketData: MarketData, \n    condition: string, \n    brand: string, \n    suggestedPrice: number,\n    originalPrice?: number\n  ): string[] {\n    const reasoning: string[] = [];\n    \n    reasoning.push(`Market average for ${marketData.brand} ${marketData.model}: $${marketData.averagePrice.toLocaleString()}`);\n    \n    if (condition !== 'excellent') {\n      reasoning.push(`Condition adjustment (${condition}): ${Math.round((1 - this.getConditionMultiplier(condition)) * 100)}% reduction`);\n    }\n    \n    if (marketData.marketTrend === 'rising') {\n      reasoning.push('Market trend: Rising demand, premium pricing recommended');\n    } else if (marketData.marketTrend === 'declining') {\n      reasoning.push('Market trend: Declining demand, competitive pricing recommended');\n    }\n    \n    if (marketData.demandLevel === 'high') {\n      reasoning.push('High market demand: Premium pricing supported');\n    } else if (marketData.demandLevel === 'low') {\n      reasoning.push('Low market demand: Competitive pricing recommended');\n    }\n    \n    if (originalPrice) {\n      const difference = suggestedPrice - originalPrice;\n      const percentage = Math.round((difference / originalPrice) * 100);\n      if (difference > 0) {\n        reasoning.push(`Your original price: $${originalPrice.toLocaleString()} (+${percentage}% adjustment recommended)`);\n      } else {\n        reasoning.push(`Your original price: $${originalPrice.toLocaleString()} (${percentage}% adjustment recommended)`);\n      }\n    }\n    \n    reasoning.push(`Recent sales: ${marketData.recentSales} similar watches sold`);\n    reasoning.push(`Average days on market: ${marketData.daysOnMarket} days`);\n    \n    return reasoning;\n  }\n\n  /**\n   * Get additional common models for each brand\n   */\n  private getAdditionalModelsForBrand(brand: string): string[] {\n    const brandModels: { [key: string]: string[] } = {\n      'Rolex': [\n        'Datejust', 'Daytona', 'GMT-Master', 'Explorer', 'Milgauss', \n        'Yacht-Master', 'Sea-Dweller', 'Air-King', 'Cellini', 'Oyster Perpetual'\n      ],\n      'Omega': [\n        'Seamaster', 'Constellation', 'De Ville', 'Speedmaster Professional',\n        'Aqua Terra', 'Planet Ocean', 'Railmaster', 'Seamaster Diver 300M'\n      ],\n      'Cartier': [\n        'Tank', 'Ballon Bleu', 'Pasha', 'Roadster', 'Calibre', \n        'Drive', 'Ronde', 'Baignoire', 'Crash', 'Tortue'\n      ],\n      'Tudor': [\n        'Pelagos', 'Ranger', 'GMT', 'Chronograph', 'Royal',\n        'Submariner', 'Heritage', 'Black Bay 58', 'Black Bay GMT'\n      ],\n      'Seiko': [\n        'Presage', 'Prospex', 'Astron', 'Premier', '5 Sports',\n        'Grand Seiko', 'King Seiko', 'Credor', 'Alpinist', 'Monster'\n      ],\n      'Tag Heuer': [\n        'Monaco', 'Carrera', 'Aquaracer', 'Link', 'Formula 1',\n        'Autavia', 'Connected', 'Monza', 'Silverstone', 'Professional'\n      ],\n      'Breitling': [\n        'Chronomat', 'Superocean', 'Avenger', 'Transocean', 'Premier',\n        'Chronoliner', 'Aerospace', 'Emergency', 'Montbrillant', 'Datora'\n      ],\n      'IWC': [\n        'Pilot', 'Ingenieur', 'Aquatimer', 'Da Vinci', 'Portofino',\n        'Vintage Collection', 'Le Petit Prince', 'Spitfire', 'Top Gun'\n      ],\n      'Panerai': [\n        'Radiomir', 'Luminor', 'Submersible', 'Luminor Due', 'Luminor Marina',\n        'Radiomir 1940', 'Luminor 1950', 'Luminor GMT', 'Luminor Chrono'\n      ],\n      'Audemars Piguet': [\n        'Royal Oak', 'Royal Oak Offshore', 'Millenary', 'Jules Audemars',\n        'Classique', 'Code 11.59', 'Royal Oak Concept', 'Tradition'\n      ],\n      'Patek Philippe': [\n        'Calatrava', 'Nautilus', 'Aquanaut', 'Grand Complications',\n        'Complications', 'Golden Ellipse', 'Gondolo', 'Twenty-4'\n      ],\n      'Vacheron Constantin': [\n        'Overseas', 'Fiftysix', 'Traditionnelle', 'Patrimony',\n        'Métiers d\\'Art', 'Historiques', 'Malte', 'Harmony'\n      ],\n      'Longines': [\n        'Conquest', 'Heritage', 'Master Collection', 'DolceVita',\n        'La Grande Classique', 'HydroConquest', 'Elegant', 'Presence'\n      ],\n      'Tissot': [\n        'T-Touch', 'T-Classic', 'T-Sport', 'T-Lady', 'T-Gold',\n        'Le Locle', 'Couturier', 'Tradition', 'Chemin des Tourelles'\n      ],\n      'Hamilton': [\n        'Khaki', 'Jazzmaster', 'Ventura', 'American Classic',\n        'Broadway', 'Pilot', 'Railroad', 'Frogman', 'Pan Europ'\n      ],\n      'Mido': [\n        'Baroncelli', 'Commander', 'Multifort', 'Ocean Star',\n        'All Dial', 'Rainflower', 'Belluna', 'Helmsman'\n      ],\n      'Swatch': [\n        'Originals', 'Irony', 'Skin', 'Scuba', 'Chrono',\n        'Touch', 'Sistem51', 'Flik Flak', 'Swatch Club'\n      ],\n      'Casio': [\n        'G-Shock', 'Pro Trek', 'Edifice', 'Baby-G', 'Sheen',\n        'Pathfinder', 'Gulfman', 'Riseman', 'Mudman'\n      ],\n      'Citizen': [\n        'Eco-Drive', 'Promaster', 'Corso', 'Satellite Wave',\n        'Chronomaster', 'Exceed', 'Campanola', 'Attesa'\n      ],\n      'Bulova': [\n        'Precisionist', 'Marine Star', 'Curv', 'Accutron',\n        'Classic', 'Automatic', 'Quartz', 'Special Edition'\n      ],\n      'Timex': [\n        'Expedition', 'Weekender', 'Ironman', 'Easy Reader',\n        'Waterbury', 'Fairfield', 'South Street', 'Marlin'\n      ]\n    };\n    \n    return brandModels[brand] || [];\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}